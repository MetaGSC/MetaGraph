# -*- coding: utf-8 -*-
"""Dataset-Preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12VZ0DXvkD7smWXkWQYl89AYhN0XIj95H
"""

# !pip install python-igraph
# !pip install cairocffi



# !pip install -q torch-scatter -f https://data.pyg.org/whl/torch-1.10.0+cu113.html
# !pip install -q torch-sparse -f https://data.pyg.org/whl/torch-1.10.0+cu113.html
# !pip install -q git+https://github.com/pyg-team/pytorch_geometric.git

# !pip install pysam

# pip3 install torch==1.9.0 torchvision==0.10.0
# conda install -c bioconda pysam

# pip3 uninstall torch torch-scatter torch-sparse torch-geometric

# pip3 install torch --no-cache-dir
# pip3 install torch-scatter --no-cache-dir -f https://data.pyg.org/whl/torch-1.10.0+cu102.html
# pip3 install torch-sparse --no-cache-dir -f https://data.pyg.org/whl/torch-1.10.0+cu102.html
# pip3 install torch-geometric --no-cache-dir

# from google.colab import drive
# drive.mount('/content/gdrive')

# gnndatasetpath = "/content/gdrive/Shareddrives/FYP/DataSets/Gnn-Dataset/Test_Datasets"

# Commented out IPython magic to ensure Python compatibility.
import re
# from igraph import *
from collections import defaultdict
import os
import random

# %matplotlib inline
import torch
import networkx as nx
import matplotlib.pyplot as plt
from torch_geometric.data import Data
from torch_geometric.utils import to_networkx
from torch_geometric.nn import GCNConv

from torch.nn import Linear
import torch.nn.functional as F

from pysam import FastaFile

from sklearn.manifold import TSNE

## Functions




# TODO: Update the function with the library


# TODO: Update the function with the library


# from IPython.display import Javascript  # Restrict height of output cell.
# display(Javascript('''google.colab.output.setIframeHeight(0, true, {maxHeight: 300})'''))

model = GCN(inputfeatures = 2, hidden_channels = 24, num_classes = 2)
model.double()
print(model)

eval_results = model.eval()
print(eval_results)

# print("x:- ", len(data.x))
# data.edge_index

out, h = model(data.x, data.edge_index)
print(f'Embedding shape: {list(h.shape)}')

visualize_embedding(h, color=data.y, filename = "Figures/test_visualize_embedding.png")
visualize(h, color=data.y, filename = "Figures/test_visualize.png")

optimizer = torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=5e-4)
criterion = torch.nn.CrossEntropyLoss()

iterate()

test_acc = test()
print("Test Accuracy: ", test_acc)

model.eval()

out, h = model(data.x, data.edge_index)
visualize(h, color=data.y, filename = "Figures/test_results_visualize_embedding.png")
